---
import siteConfig from '../data/site-config.ts';
const subscribe = siteConfig.subscribe;

const { class: className } = Astro.props;
---

<style>
    form{
        justify-content: flex-start;
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
    }
</style>

{
    (subscribe?.title || subscribe?.text || subscribe?.formUrl) && (
        <section class={className}>
            <div class="w-full max-w-3xl mx-auto px-4 py-8 flex flex-col items-center bg-slate-50 dark:bg-slate-800 border border-slate-200 rounded-md text-center sm:px-12 sm:py-14">
                {subscribe?.title && <h2 class="max-w-xl text-2xl font-bold text-slate-900 dark:text-slate-100 sm:text-3xl">{subscribe?.title}</h2>}
                {subscribe?.text && <p class:list={['max-w-xl text-slate-700 dark:text-slate-300 sm:text-lg', { 'mt-4': subscribe?.title }]}>{subscribe?.text}</p>}
                {subscribe?.formUrl && (
                    <form
                        action={subscribe?.formUrl}
                        method="post"
                        id="mc-embedded-subscribe-form"
                        name="mc-embedded-subscribe-form"
                        class:list={['w-full max-w-xl flex flex-col gap-2.5', { 'mt-7': subscribe?.title || subscribe?.text }]}
                    >
                    <div class="w-full flex flex-wrap sm:flex-nowrap gap-2">
                        <label for="mce-EMAIL" class="sr-only">
                            Email Address
                        </label>
                        <input
                            type="email"
                            name="email"
                            id="mce-EMAIL"
                            class="w-full sm:w-10/12 h-11 px-5 py-2 text-slate-700 bg-white border border-slate-200 rounded-full placeholder:text-slate-500 focus:outline-none"
                            required=""
                            value=""
                            placeholder="email"
                        />
                        <button
                            type="submit"
                            name="subscribe"
                            id="mc-embedded-subscribe"
                            class="w-full sm:w-auto px-8 py-2.5 inline-flex gap-1.5 justify-center items-center font-semibold bg-primary text-black rounded-full transition duration-300 hover:shadow-button"
                        >
                        {subscribe?.textBtn}
                        </button>
                    </div>
                    <div class="w-full">
                        <label id="gdpr-label" class="flex items-center justify-center">
                            <input type="checkbox" name="gdpr" aria-labelledby="gdpr-label" class="border-0" value="1" required="">
                            <span class="mx-1 text-slate-700 dark:text-slate-300">Acepto recibir comunicaciones de interes legitimo (puedes darte de baja en cualquier momento)</span>
                        </label>
                    </div>
                    <div id="captcha"></div>
                    </form>
                )}
            </div>
        </section>
    )
}


<script>
    const form: HTMLFormElement | null = document.querySelector('#mc-embedded-subscribe-form');
    const email = form?.querySelector('input[name="email"]') as HTMLInputElement | null;

    form?.addEventListener('submit', function (event) {
        event.preventDefault();
        event.stopPropagation();
        signUp();
    });

    function signUp() {
        console.log("registered to newsletter", email?.value);
        if (!form?.checkValidity()) {
            // return;
        } else {
            fetch(form?.action, {
                method: 'POST',
                headers: {
                    Authorization: 'Bearer ' + import.meta.env.PUBLIC_SENDGRID_KEY,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: email?.value,
                    gdpr: (form?.querySelector('input[name="gdpr"]') as HTMLInputElement)?.checked ? '1' : '0',
                })
            })
                .then((response) => response.json())
                .then((response) => {
                    showToast('Â¡Te has suscrito correctamente a la newsletter!', 'success');
                    console.log("Newsletter subscription successful", response);
                })
                .catch((error) => {
                    showToast('Hubo un error al suscribirte. Intenta de nuevo.', 'error');
                    console.error(error.status, error.statusText);
                });
    // Toast nativo con Tailwind
    function showToast(message: string, type: string = 'success') {
        let toast = document.createElement('div');
        toast.textContent = message;
        toast.className = `fixed bottom-6 left-1/2 z-[9999] px-6 py-3 rounded-full shadow-lg text-base font-semibold pointer-events-none transition-all duration-500 transform -translate-x-1/2 ` +
            (type === 'success'
                ? 'bg-green-500 text-white'
                : 'bg-red-500 text-white');
        document.body.appendChild(toast);
        setTimeout(() => {
            toast.classList.add('opacity-0', 'translate-y-4');
        }, 2000);
        setTimeout(() => {
            toast.remove();
        }, 2600);
    }
            form?.reset();
        }
    }
    window.renderCaptcha = function () {
        console.debug('captcha rendered');
        turnstile.render('#captcha', {
        sitekey: import.meta.env.PUBLIC_CAPTCHA,
        theme: 'light',
    });
    }
    document.addEventListener('astro:page-load', () => {
        renderCaptcha();
    })

</script>
<script src="https://challenges.cloudflare.com/turnstile/v0/api.js?onload=renderCaptcha" async defer></script>
