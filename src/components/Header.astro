---
import HeaderNavLink from './HeaderNavLink.astro';
import siteConfig from '../data/site-config.ts';
import ThemeToggle from './ThemeToggle.astro';

const primaryNavLinks = siteConfig.primaryNavLinks || [];
const { class: className } = Astro.props;
---

<header id="main-header" class:list={["fixed top-0 left-0 w-full z-30 transition-all duration-300 bg-[#ffd53b] dark:bg-black/50 backdrop-blur", className]}>
  <div id="header-inner" class="w-full flex items-center justify-between px-4 sm:px-8 transition-all duration-300" style="padding-top:1.5rem;padding-bottom:1.5rem;transition:padding 0.3s cubic-bezier(0.4,0,0.2,1);">
    <div class="flex items-center gap-2">
      {
        siteConfig.logo && siteConfig.logo?.src ? (
            <a href="/">
                <img id="main-logo" class="w-10 sm:w-14 md:w-20 xl:w-full rounded-full transition-all duration-300 dark:filter dark:invert" src={siteConfig.logo.src} alt={siteConfig.logo.alt || ''} style="height:4.5rem;max-height:4.5rem;transition:height 0.3s cubic-bezier(0.4,0,0.2,1),max-height 0.3s cubic-bezier(0.4,0,0.2,1);" />
            </a>
        ) : (
            <a class="text-xl font-bold sm:text-2xl" href="/">
                {siteConfig.title}
            </a>
        )
      }
    </div>
    {/* Desktop menu */}
    {primaryNavLinks.length > 0 && (
      <nav id="main-nav" class="hidden md:flex items-center gap-4 sm:gap-6 bg-transparent dark:bg-black backdrop-blur rounded-2xl shadow-lg px-6 border border-white/80 dark:border-[#FFD43B]/60 transition-all duration-300" style="padding-top:0.5rem;padding-bottom:0.5rem;transition:padding 0.3s cubic-bezier(0.4,0,0.2,1);">
        {primaryNavLinks.map((link) => (
          <HeaderNavLink
            class={[
              "relative font-semibold px-2 py-1 transition-colors duration-200 after:content-[''] after:block after:h-0.5 after:bg-black dark:after:bg-white after:scale-x-0 hover:after:scale-x-100 after:transition-transform after:duration-200 after:origin-left",
              link.text === 'Contacto'
                ? 'text-white bg-black dark:bg-[#FFD43B] dark:text-[#181A2A] rounded-full px-4 py-1 shadow-md hover:bg-[#181A2A] hover:text-white dark:hover:bg-white dark:hover:text-[#181A2A]'
                : 'text-black dark:text-[#FFD43B] hover:text-black dark:hover:text-[#FFD43B]'
            ].join(' ')}
            href={link.href}
          >
            {link.text}
          </HeaderNavLink>
        ))}
      </nav>
    )}
    {/* Mobile menu: solo Contacto y hamburguesa */}
    <div class="flex md:hidden items-center gap-2">
      {primaryNavLinks.map((link) => (
        link.text === 'Contacto' && (
          <HeaderNavLink
            class="text-white bg-[#7b2b90] rounded-full px-4 py-1 shadow-md font-semibold border border-[#7b2b90] hover:bg-[#181A2A] hover:text-white transition-colors duration-200"
            href={link.href}
          >
            {link.text}
          </HeaderNavLink>
        )
      ))}
      <button
        class="inline-flex items-center justify-center w-10 h-10 rounded-lg bg-white/80 border border-white/60 shadow-md"
        aria-label="Abrir menú"
        onclick="window.toggleMobileMenu && window.toggleMobileMenu()"
        type="button"
      >
        <svg class="w-6 h-6 text-[#181A2A]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>
  {/* Menú desplegable mobile */}
  <div id="mobile-menu" class="fixed top-0 left-0 w-full h-full bg-white/50 backdrop-blur rounded-b-2xl shadow-lg border-b border-white/60 z-40 transition-transform duration-300 -translate-y-full md:hidden flex flex-col">
    <div class="flex flex-col items-center gap-6 py-12 px-6 flex-1">
      {primaryNavLinks.filter(link => link.text !== 'Contacto').map((link) => (
        <HeaderNavLink
          class="text-[#181A2A] text-lg font-semibold px-4 py-2 rounded hover:bg-[#FFD43B] transition-colors duration-200 w-full text-center"
          href={link.href}
        >
          {link.text}
        </HeaderNavLink>
      ))}
    </div>
    <div class="w-full flex items-end justify-between px-6 pb-6">
      <div class="">
        <ThemeToggle />
      </div>
      <button
        class="w-12 h-12 flex items-center justify-center rounded-full bg-white/80 border border-white/60 shadow-lg z-50"
        aria-label="Cerrar menú"
        onclick="window.toggleMobileMenu && window.toggleMobileMenu()"
        type="button"
      >
        <svg class="w-7 h-7 text-[#181A2A]" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>
  <script is:inline>
    window.toggleMobileMenu = function() {
      const menu = document.getElementById('mobile-menu');
      if (menu) {
        const isOpen = menu.classList.contains('translate-y-0');
        menu.classList.toggle('translate-y-0', !isOpen);
        menu.classList.toggle('-translate-y-full', isOpen);
      }
    }
    // Sticky shrink/expand effect compatible with Astro navigation
    function initHeaderShrinkEffect() {
      const header = document.getElementById('main-header');
      const inner = document.getElementById('header-inner');
      const logo = document.getElementById('main-logo');
      const nav = document.getElementById('main-nav');
      if (!header || !inner || !logo || !nav) return;
      // Remove previous scroll listener if any
      if (window.__headerScrollHandler) {
        window.removeEventListener('scroll', window.__headerScrollHandler);
      }
      let shrinked = false;
      function setShrink(shrink) {
        if (shrink) {
          inner.style.paddingTop = inner.style.paddingBottom = '0.5rem';
          logo.style.height = logo.style.maxHeight = '2.5rem';
          nav.style.paddingTop = nav.style.paddingBottom = '0.25rem';
          header.classList.add('shadow-md');
        } else {
          inner.style.paddingTop = inner.style.paddingBottom = '1.5rem';
          logo.style.height = logo.style.maxHeight = '4.5rem';
          nav.style.paddingTop = nav.style.paddingBottom = '0.5rem';
          header.classList.remove('shadow-md');
        }
      }
      function onScroll() {
        if (window.scrollY > 40 && !shrinked) {
          shrinked = true;
          setShrink(true);
        } else if (window.scrollY <= 40 && shrinked) {
          shrinked = false;
          setShrink(false);
        }
      }
      // Set initial state
      setShrink(window.scrollY > 40);
      window.addEventListener('scroll', onScroll);
      window.__headerScrollHandler = onScroll;
    }
    // Astro navigation: use 'astro:page-load' for full compatibility (astro:after-swap is not always fired)
    window.addEventListener('DOMContentLoaded', initHeaderShrinkEffect);
    document.addEventListener('astro:page-load', initHeaderShrinkEffect);
  </script>
</header>
